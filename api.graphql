### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Bet {
  amount: Float
  betType: BetType!
  bettor: String!
  claimed: Boolean!
  contestantId: String!
  createdAt: DateTime!
  id: ID!
  lap: Int!
  race: BetRace!
  raceId: String!
  result: BetResult!
  tx: String
  winAmount: Float
}

type BetRace {
  id: String!
  name: String!
}

enum BetResult {
  LOSE
  REMOVED
  WAITING
  WIN
}

enum BetStatus {
  CLOSED
  OPEN
}

enum BetType {
  LAP
  RACE
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Contestant {
  id: String!
  name: String!
  pic: String!
}

type Contract {
  abi: String!
  address: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Lap {
  betOpen: String!
  name: String!
}

type Laps {
  laps: [Lap!]!
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

type Query {
  activeRace: Race
  activeScoreboard: [Scoreboard]!
  contract: Contract!
  laps(raceId: String!): Laps!
  race(id: String!): Race!
  raceBets(onlyActive: Boolean, raceId: String, type: BetType): [Bet!]!
}

type Race {
  betStatus: BetStatus!
  contestants: [Contestant!]!
  currentLap: Int!
  id: ID!

  """The current lap might have finished, but not started yet"""
  lapFinished: Boolean
  laps: Int!

  """From 1"""
  lapsBetStatus: [Boolean!]
  maxBet: Float!
  minBet: Float!
  name: String!
  startingAt: DateTime!
  status: RaceStatus!
}

enum RaceStatus {
  CANCELLED
  FINISHED
  ONGOING
  SCHEDULED
}

type Scoreboard {
  contestant: Contestant!
  lapScore: [Int!]!
  overallScore: Int!
}